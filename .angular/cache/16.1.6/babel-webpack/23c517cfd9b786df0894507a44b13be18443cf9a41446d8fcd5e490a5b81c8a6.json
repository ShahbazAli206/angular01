{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nexport let ProductListComponent = class ProductListComponent {\n  constructor(route, dataService, http, localStorageService) {\n    this.route = route;\n    this.dataService = dataService;\n    this.http = http;\n    this.localStorageService = localStorageService;\n    this.cards = [];\n  }\n  onCardClick(card) {\n    this.localStorageService.addCard(card);\n  }\n  onClearLocalStorageClick() {\n    this.localStorageService.clearStoredCards();\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.cardId = +params['id']; // Use the + operator to convert the string to an integer\n      // console.log( this.cardId); // This will log the card.id value from the clicked card\n    });\n\n    this.fetchCardsFromApi();\n  }\n  fetchCardsFromApi() {\n    console.log('the clicked category id is : ', this.cardId); // Now you can access the cardId here\n    let params = new HttpParams().set('cardId', this.cardId.toString());\n    this.http.get('http://127.0.0.1:8000/api/products_angular', {\n      params\n    }).pipe(map(data => {\n      // Assuming the API returns an array of cards with 'imageUrl' property\n      // Add 'http://127.0.0.1:8000/storage/' before each image URL\n      return data.map(card => ({\n        ...card,\n        imageUrl: 'http://127.0.0.1:8000/storage/' + card.image\n      }));\n    })).subscribe(data => {\n      this.cards = data; // Assuming the API returns an array of cards\n      console.log('Items:', this.cards); // Add this line to console log the cards\n    }, error => {\n      console.error('Error fetching data from API:', error);\n    });\n  }\n};\nProductListComponent = __decorate([Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})], ProductListComponent);","map":{"version":3,"names":["Component","HttpParams","map","ProductListComponent","constructor","route","dataService","http","localStorageService","cards","onCardClick","card","addCard","onClearLocalStorageClick","clearStoredCards","ngOnInit","params","subscribe","cardId","fetchCardsFromApi","console","log","set","toString","get","pipe","data","imageUrl","image","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Laptop Wala\\Desktop\\Anguler Projects\\myApp\\src\\app\\components\\product-list\\product-list.component.ts"],"sourcesContent":["import { Component , OnInit } from '@angular/core';\nimport { HttpClient, HttpParams  } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { LocalStorageService } from '../../services/local-storage-service.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProductsService } from 'src/app/services/products.service';\n\n\ninterface Card {\n  id: number;\n  name: string;\n  image: string;\n  // Add other properties as needed\n}\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n  cards: any[] = [];\n  private cardId!: number; \n  constructor(private route: ActivatedRoute, private dataService: DataService, private http: HttpClient, private localStorageService: LocalStorageService) {}\n \n \n  onCardClick(card: any) {\n    this.localStorageService.addCard(card);\n  }\n \n  onClearLocalStorageClick() {\n    this.localStorageService.clearStoredCards();\n  }\n\n\n  \n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.cardId = +params['id']; // Use the + operator to convert the string to an integer\n      // console.log( this.cardId); // This will log the card.id value from the clicked card\n    });\n    this.fetchCardsFromApi();\n  }\n\n  fetchCardsFromApi(): void {\n    console.log('the clicked category id is : ', this.cardId); // Now you can access the cardId here\n    let params = new HttpParams().set('cardId', this.cardId.toString());\n\n    this.http.get<any>('http://127.0.0.1:8000/api/products_angular', { params }).pipe(\n      map((data) => {\n        // Assuming the API returns an array of cards with 'imageUrl' property\n        // Add 'http://127.0.0.1:8000/storage/' before each image URL\n        return data.map((card: Card) => ({\n          ...card,\n          imageUrl: 'http://127.0.0.1:8000/storage/' + card.image\n        }));\n      })\n    ).subscribe(\n      (data) => {\n        this.cards = data; // Assuming the API returns an array of cards\n        console.log('Items:', this.cards); // Add this line to console log the cards\n\n      },\n      (error) => {\n        console.error('Error fetching data from API:', error);\n      }\n    );\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAiB,eAAe;AAClD,SAAqBC,UAAU,QAAS,sBAAsB;AAC9D,SAASC,GAAG,QAAQ,gBAAgB;AAiB7B,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAG/BC,YAAoBC,KAAqB,EAAUC,WAAwB,EAAUC,IAAgB,EAAUC,mBAAwC;IAAnI,KAAAH,KAAK,GAALA,KAAK;IAA0B,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,IAAI,GAAJA,IAAI;IAAsB,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAFlI,KAAAC,KAAK,GAAU,EAAE;EAEyI;EAG1JC,WAAWA,CAACC,IAAS;IACnB,IAAI,CAACH,mBAAmB,CAACI,OAAO,CAACD,IAAI,CAAC;EACxC;EAEAE,wBAAwBA,CAAA;IACtB,IAAI,CAACL,mBAAmB,CAACM,gBAAgB,EAAE;EAC7C;EAIAC,QAAQA,CAAA;IACN,IAAI,CAACV,KAAK,CAACW,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnC,IAAI,CAACE,MAAM,GAAG,CAACF,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC;;IACF,IAAI,CAACG,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiBA,CAAA;IACfC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE,IAAI,CAACH,MAAM,CAAC,CAAC,CAAC;IAC3D,IAAIF,MAAM,GAAG,IAAIf,UAAU,EAAE,CAACqB,GAAG,CAAC,QAAQ,EAAE,IAAI,CAACJ,MAAM,CAACK,QAAQ,EAAE,CAAC;IAEnE,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAM,4CAA4C,EAAE;MAAER;IAAM,CAAE,CAAC,CAACS,IAAI,CAC/EvB,GAAG,CAAEwB,IAAI,IAAI;MACX;MACA;MACA,OAAOA,IAAI,CAACxB,GAAG,CAAES,IAAU,KAAM;QAC/B,GAAGA,IAAI;QACPgB,QAAQ,EAAE,gCAAgC,GAAGhB,IAAI,CAACiB;OACnD,CAAC,CAAC;IACL,CAAC,CAAC,CACH,CAACX,SAAS,CACRS,IAAI,IAAI;MACP,IAAI,CAACjB,KAAK,GAAGiB,IAAI,CAAC,CAAC;MACnBN,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAACZ,KAAK,CAAC,CAAC,CAAC;IAErC,CAAC,EACAoB,KAAK,IAAI;MACRT,OAAO,CAACS,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CACF;EACH;CAED;AAjDY1B,oBAAoB,GAAA2B,UAAA,EALhC9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACW9B,oBAAoB,CAiDhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}